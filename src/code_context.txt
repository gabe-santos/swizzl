// File: components/drinks-grid.tsx
import { Card, CardBody, CardFooter } from '@nextui-org/card';
import { Image } from '@nextui-org/image';
import NextImage from 'next/image';
import Link from 'next/link';

interface Drink {
	idDrink: string;
	strDrink: string;
	strDrinkThumb: string;
}

export default async function DrinksGrid({ drinks }: { drinks: Drink[] }) {
	if (!drinks || drinks.length === 0) {
		return <p>No drinks found.</p>;
	}

	return (
		<div className='grid grid-cols-3 gap-4'>
			{drinks.map((d: Drink) => (
				<DrinkCard
					key={d.idDrink}
					id={d.idDrink}
					title={d.strDrink}
					src={d.strDrinkThumb}
				/>
			))}
		</div>
	);
}

const DrinkCard = ({
	id,
	title,
	src,
}: {
	id: string;
	title: string;
	src: string;
}) => {
	return (
		<Card as={Link} href={`/drink/${id}`} className='w-fit'>
			<Image
				as={NextImage}
				className='hover:scale-105 transition-transform duration-500 ease-in-out'
				src={src}
				alt={title}
				width={300}
				height={300}
				isZoomed
			/>
			<CardFooter>
				<p className='group-hover:font-medium font-regular text-lg text-center w-full'>
					{title}
				</p>
			</CardFooter>
		</Card>
	);
};

// File: components/favorite-btn.tsx
import { Button } from "@nextui-org/react";
import { Heart } from "lucide-react";

export default function FavoriteBtn() {
  return (
    <form action="">
      <Button variant="flat" startContent={<Heart color="#ef4444" />}>
        Add to Favorites
      </Button>
    </form>
  );
}

// File: components/footer.tsx
export default function Footer() {
  return <footer className="bg-slate-300 w-full h-1/2">made with love</footer>;
}

// File: components/nav.tsx
import { Navbar, NavbarBrand, NavbarItem } from '@nextui-org/navbar';
import SearchBar from './search-bar';
import RandomDrinkBtn from './random-drink-btn';
import Link from 'next/link';
import SignInBtn from './sign-in-btn';
import UserDropdown from './user-dropdown';
import { getUser } from '@/lib/actions/auth';

export default async function Nav({ children }: { children: React.ReactNode }) {
	const user = await getUser();

	return (
		<Navbar
			shouldHideOnScroll
			maxWidth='full'
			isBlurred
			className='flex items-center gap-8 py-2 mb-8'>
			<NavbarBrand className='flex-grow-0'>
				<Link href='/' className='text-3xl font-medium'>
					swizzlüçπ
				</Link>
			</NavbarBrand>

			<NavbarItem className='flex-grow gap-1 flex justify-center px-12 max-w-screen-lg'>
				{children}
			</NavbarItem>

			<NavbarItem>
				{user ? (
					<UserDropdown name={user.user_metadata.first_name} />
				) : (
					<SignInBtn />
				)}
			</NavbarItem>
		</Navbar>
	);
}

// File: components/random-drink-btn.tsx
"use client";
import { Button } from "@nextui-org/button";
import { Shuffle } from "lucide-react";
import { getRandomDrink } from "@/lib/queries/drinks";
import { useTransition } from "react";

export default function RandomDrinkBtn() {
  const [isPending, startTransition] = useTransition();

  const handleSubmit = (e: any) => {
    e.preventDefault();
    startTransition(() => {
      getRandomDrink();
    });
  };

  return (
    <form action="" onSubmit={handleSubmit}>
      <Button
        isIconOnly
        type="submit"
        color="primary"
        size="lg"
        isLoading={isPending}
      >
        <Shuffle />
      </Button>
    </form>
  );
}

// File: components/search-bar.tsx
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import { Input } from "@nextui-org/input";
import { Button } from "@nextui-org/button";
import { Search } from "lucide-react";

export default function SearchBar() {
  const [query, setQuery] = useState("");
  const router = useRouter();

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    router.push(`/?query=${encodeURIComponent(query)}`);
  };

  return (
    <form onSubmit={handleSearch} className="flex w-full gap-4">
      <Input
        variant="bordered"
        size="lg"
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search for drinks..."
        isClearable
        endContent={
          <Button
            className="opacity-50"
            variant="light"
            size="sm"
            isIconOnly
            type="submit"
          >
            <Search />
          </Button>
        }
      />
    </form>
  );
}

// File: components/sign-in-btn.tsx
"use client";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalHeader,
  Tab,
  Tabs,
  useDisclosure,
} from "@nextui-org/react";
import SignInForm from "./sign-in-form";
import SignUpForm from "./sign-up-form";

export default function SignInBtn() {
  const { isOpen, onOpen, onOpenChange } = useDisclosure();

  return (
    <>
      <Button onPress={onOpen} variant="light" size="lg">
        Sign In
      </Button>

      <Modal
        isOpen={isOpen}
        onOpenChange={onOpenChange}
        backdrop="blur"
        motionProps={{
          variants: {
            enter: {
              y: 0,
              opacity: 1,
              transition: {
                duration: 0.3,
                ease: "easeOut",
              },
            },
            exit: {
              y: 40,
              opacity: 0,
              transition: {
                duration: 0.2,
                ease: "easeIn",
              },
            },
          },
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="text-xl">
                Let&apos;s Get Mixing
              </ModalHeader>
              <ModalBody>
                <Tabs>
                  <Tab key="signin" title="Sign In">
                    <SignInForm onClose={onClose} />
                  </Tab>
                  <Tab key="signup" title="Sign Up">
                    <SignUpForm onClose={onClose} />
                  </Tab>
                </Tabs>
              </ModalBody>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}

// File: components/sign-in-form.tsx
import { revalidate, signInWithPassword } from "@/lib/actions/auth";
import NextLink from "next/link";
import { Button, Input, Link } from "@nextui-org/react";
import { useState, useTransition } from "react";

export default function SignInForm({ onClose }: { onClose: () => void }) {
  const [isPending, startTransition] = useTransition();
  const [error, setError] = useState<string | null>("");

  const handleSubmit = async (event: any) => {
    event.preventDefault();
    const formData = new FormData(event.target);

    startTransition(async () => {
      const result = await signInWithPassword(formData);
      if (result.error) {
        setError(result.error);
      } else {
        onClose();
        revalidate();
      }
    });
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col gap-2 pb-4">
      <Input autoFocus variant="bordered" label="Email" name="email" />
      <Input
        variant="bordered"
        type="password"
        label="Password"
        name="password"
      />
      {/* Dumb fix */}
      <Input className="opacity-0" variant="bordered" label="ignore" />
      {error && <p className="text-danger">{error}</p>}
      <Link
        as={NextLink}
        onClick={onClose}
        href="/forgot-password"
        color="primary"
        className="flex justify-end"
      >
        Forgot password?
      </Link>
      <div className="flex justify-end">
        <Button type="submit" color="primary" isLoading={isPending}>
          Sign in
        </Button>
      </div>
    </form>
  );
}

// File: components/sign-up-form.tsx
import { revalidate, signUpNewUser } from "@/lib/actions/auth";
import NextLink from "next/link";
import { Button, Input, Link } from "@nextui-org/react";
import { useTransition, useState } from "react";

export default function SignUpForm({ onClose }: { onClose: () => void }) {
  const [isPending, startTransition] = useTransition();
  const [error, setError] = useState<string | null>("");

  const handleSubmit = async (event: any) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    console.log(formData.get("email"));

    startTransition(async () => {
      const result = await signUpNewUser(formData);
      if (result.error) {
        setError(result.error);
      } else {
        onClose();
        revalidate();
      }
    });
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col gap-2 pb-4">
      <Input autoFocus variant="bordered" label="Name" name="name" />
      <Input variant="bordered" label="Email" name="email" />
      <Input
        variant="bordered"
        type="password"
        label="Password"
        name="password"
      />
      <Link as={NextLink} href="#" color="primary" className="flex justify-end">
        Forgot password?
      </Link>
      <div className="flex justify-end">
        <Button type="submit" color="primary" isLoading={isPending}>
          Sign in
        </Button>
      </div>
    </form>
  );
}

// File: components/user-dropdown.tsx
"use client";
import { revalidate, signOutUser } from "@/lib/actions/auth";
import {
  Avatar,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
} from "@nextui-org/react";

export default function UserDropdown({ name }: { name: string }) {
  const handleSubmit = async () => {
    const { error } = await signOutUser();
    if (error) console.log("error signing out");
    else {
      await revalidate();
    }
  };

  return (
    <Dropdown placement="bottom-start">
      <DropdownTrigger>
        <div className="flex gap-2 font-medium items-center hover:cursor-pointer">
          {name}
          <Avatar radius="full" />
        </div>
      </DropdownTrigger>

      <DropdownMenu>
        <DropdownItem key="favorites">Favorites</DropdownItem>
        <DropdownItem key="signout" color="danger">
          <button onClick={handleSubmit} type="submit">
            Sign out
          </button>
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}

// File: app/(auth)/forgot-password/page.tsx
export default function ForgotPassword() {
	return <div>you forgot your password...</div>;
}

// File: app/(auth)/layout.tsx
export default function AuthLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return <div>{children}</div>;
}

// File: app/drink/[drinkId]/page.tsx
import FavoriteBtn from "@/components/favorite-btn";
import { getDrinkById } from "@/lib/queries/drinks";
import { DrinkData } from "@/types/drink";
import { Chip, Image } from "@nextui-org/react";
import { extractIngredientsAndMeasurements } from "@/utils/drink";

export default async function DrinkPage({
  params,
}: {
  params: { drinkId: string };
}) {
  const drinkData: DrinkData = await getDrinkById(params.drinkId);

  if (!drinkData) return "No drink found.";

  const ingredients = extractIngredientsAndMeasurements(drinkData);

  return (
    <div className="flex  gap-8">
      <div className="flex-1">
        <Image
          src={drinkData.strDrinkThumb}
          alt={drinkData.strDrink}
          width={800}
          height={800}
        />
      </div>

      <div className="flex flex-1 flex-col items-start justify-between px-8">
        <div className="flex flex-col gap-4">
          <h1 className="text-4xl font-medium">{drinkData.strDrink}</h1>
          <FavoriteBtn />
          <p>{drinkData.strInstructions}</p>
          <ul>
            {ingredients.map(({ ingredient, measure }, index) => (
              <li key={index}>
                {measure} {ingredient}
              </li>
            ))}
          </ul>
        </div>
        <div className="flex gap-1">
          {drinkData.strTags?.split(",").map((t, index) => {
            return <Chip key={index}>{t}</Chip>;
          })}
        </div>
      </div>
    </div>
  );
}

// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

// File: app/layout.tsx
import type { Metadata } from 'next';
import { Fraunces } from 'next/font/google';
import './globals.css';
import Nav from '@/components/nav';
import SearchBar from '@/components/search-bar';
import RandomDrinkBtn from '@/components/random-drink-btn';
import { Providers } from './providers';
import clsx from 'clsx';

const fraunces = Fraunces({ subsets: ['latin'] });

export const metadata: Metadata = {
	title: 'swizzl',
	description: 'A cocktail recipe library',
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang='en'>
			<body
				className={clsx(
					fraunces.className,
					'flex flex-col items-center w-full font-light'
				)}>
				<Nav>
					<SearchBar />
					<RandomDrinkBtn />
				</Nav>
				<div className='w-full flex flex-col max-w-screen-xl items-center px-6'>
					<Providers>{children}</Providers>
				</div>
			</body>
		</html>
	);
}

// File: app/page.tsx
import DrinksGrid from "@/components/drinks-grid";
import { getDrinks } from "@/lib/queries/drinks";

export default async function Home({
  searchParams,
}: {
  searchParams?: { query?: string };
}) {
  const query = searchParams?.query || "";
  const res = await getDrinks(query);
  const drinks = res.drinks;

  return (
    <>
      <DrinksGrid drinks={drinks} />
    </>
  );
}

// File: app/providers.tsx
// app/providers.tsx

import { NextUIProvider } from '@nextui-org/react';

export function Providers({ children }: { children: React.ReactNode }) {
	return <NextUIProvider>{children}</NextUIProvider>;
}

// File: utils/drink.ts
import { DrinkData } from "@/types/drink";
import { IngredientMeasure } from "@/types/drink";

export const extractIngredientsAndMeasurements = (
  drinkData: DrinkData,
): IngredientMeasure[] => {
  const ingredients: IngredientMeasure[] = [];

  for (let i = 1; i <= 15; i++) {
    const ingredientKey = `strIngredient${i}` as keyof DrinkData;
    const measureKey = `strMeasure${i}` as keyof DrinkData;

    const ingredient = drinkData[ingredientKey];
    if (ingredient) {
      const measure = (drinkData[measureKey] || "").trim();
      ingredients.push({ ingredient, measure });
    }
  }

  return ingredients;
};

// File: utils/supabase/client.ts
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );

// File: utils/supabase/middleware.ts
import { createServerClient } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value),
          );
          supabaseResponse = NextResponse.next({
            request,
          });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options),
          );
        },
      },
    },
  );

  // IMPORTANT: Avoid writing any logic between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (
    !user &&
    !request.nextUrl.pathname.startsWith("/login") &&
    !request.nextUrl.pathname.startsWith("/auth")
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone();
    url.pathname = "/login";
    return NextResponse.redirect(url);
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're
  // creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse;
}

// File: utils/supabase/server.ts
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = (cookieStore: ReturnType<typeof cookies>) => {
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options });
          } catch (error) {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value: "", ...options });
          } catch (error) {
            // The `delete` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    },
  );
};

// File: types/auth.ts
export type AuthResult = {
  success?: boolean;
  error?: string;
};

// File: types/drink.ts
export type DrinkData = {
  strDrink: string;
  strInstructions: string;
  strTags: null | string;
  strDrinkThumb: string;
};

export interface IngredientMeasure {
  ingredient: string;
  measure: string;
}

